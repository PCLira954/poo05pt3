class Cliente {
    constructor(nome) {
        this.nome = nome
    }

    toString() {
        return `Cliente: ${this.nome}`
    }
}

class Conta {
    constructor(numero, saldo = 0, cliente = null) {
        this.numero = numero
        this.saldo = saldo
        this.cliente = cliente
    }

    sacar(valor) {
        if (valor > this.saldo) return false
        this.saldo -= valor
        return true
    }

    depositar(valor) {
        this.saldo += valor
    }

    transferir(contaDestino, valor) {
        if (this.sacar(valor)) {
            contaDestino.depositar(valor)
            return true
        }
        return false
    }

    setCliente(cliente) {
        this.cliente = cliente
    }

    toString() {
        return `Conta: ${this.numero}, Saldo: ${this.saldo}, ${this.cliente ? this.cliente.toString() : "Sem cliente"}`
    }
}

class Banco {
    constructor() {
        this.contas = []
        this.clientes = []
    }

    inserirConta(conta) {
        if (this.contas.find(c => c.numero === conta.numero)) throw new Error("Conta já existe.")
        this.contas.push(conta)
    }

    inserirCliente(cliente) {
        this.clientes.push(cliente)
    }

    consultarConta(numero) {
        return this.contas.find(conta => conta.numero === numero)
    }

    consultarCliente(nome) {
        return this.clientes.find(cliente => cliente.nome === nome)
    }

    sacar(numero, valor) {
        const conta = this.consultarConta(numero)
        if (!conta) throw new Error("Conta não encontrada.")
        if (!conta.sacar(valor)) throw new Error("Saldo insuficiente.")
    }

    depositar(numero, valor) {
        const conta = this.consultarConta(numero)
        if (!conta) throw new Error("Conta não encontrada.")
        conta.depositar(valor)
    }

    transferir(numeroOrigem, numeroDestino, valor) {
        const contaOrigem = this.consultarConta(numeroOrigem)
        const contaDestino = this.consultarConta(numeroDestino)
        if (!contaOrigem || !contaDestino) throw new Error("Conta(s) não encontrada(s).")
        if (!contaOrigem.transferir(contaDestino, valor)) throw new Error("Saldo insuficiente para transferência.")
    }

    excluirCliente(nome) {
        const cliente = this.consultarCliente(nome)
        if (!cliente) throw new Error("Cliente não encontrado.")

        // Remover vínculo com contas
        this.contas.forEach(conta => {
            if (conta.cliente === cliente) conta.setCliente(null)
        });
        this.clientes = this.clientes.filter(c => c !== cliente)
    }

    excluirConta(numero) {
        const conta = this.consultarConta(numero)
        if (!conta) throw new Error("Conta não encontrada.")
        const cliente = conta.cliente
        if (cliente) conta.setCliente(null)
        this.contas = this.contas.filter(c => c !== conta)
    }

    listarContasSemCliente() {
        return this.contas.filter(conta => !conta.cliente)
    }

    atribuirClienteAConta(numero, nomeCliente) {
        const conta = this.consultarConta(numero)
        if (!conta) throw new Error("Conta não encontrada.")
        const cliente = this.consultarCliente(nomeCliente)
        if (!cliente) throw new Error("Cliente não encontrado.")
        conta.setCliente(cliente)
    }

    ordemBancaria(numeroOrigem, destinos) {
        const contaOrigem = this.consultarConta(numeroOrigem)
        if (!contaOrigem) throw new Error("Conta de origem não encontrada.")

        const total = destinos.reduce((soma, { valor }) => soma + valor, 0)
        if (total > contaOrigem.saldo) throw new Error("Saldo insuficiente.")

        destinos.forEach(({ numeroDestino, valor }) => {
            const contaDestino = this.consultarConta(numeroDestino)
            if (!contaDestino) throw new Error(`Conta destino ${numeroDestino} não encontrada.`)
            contaOrigem.transferir(contaDestino, valor)
        })
    }

    toString() {
        return this.contas.map(conta => conta.toString()).join("\n")
    }
}

class App {
    constructor() {
        this.banco = new Banco()
        this.input = require("prompt-sync")()
    }

    menu() {
        let opcao = ""
        do {
            console.log("\nMenu:");
            console.log("1 - Inserir Conta\n2 - Inserir Cliente\n3 - Consultar Conta\n4 - Sacar\n5 - Depositar\n6 - Transferir")
            console.log("7 - Excluir Cliente\n8 - Excluir Conta\n9 - Listar Contas Sem Cliente\n10 - Ordem Bancária\n0 - Sair")
            opcao = this.input("Opção: ")

            try {
                switch (opcao) {
                    case "1":
                        this.inserirConta()
                        break
                    case "2":
                        this.inserirCliente()
                        break
                    case "3":
                        this.consultarConta()
                        break
                    case "4":
                        this.sacar()
                        break
                    case "5":
                        this.depositar()
                        break
                    case "6":
                        this.transferir()
                        break
                    case "7":
                        this.excluirCliente()
                        break
                    case "8":
                        this.excluirConta()
                        break
                    case "9":
                        this.listarContasSemCliente()
                        break
                    case "10":
                        this.ordemBancaria()
                        break
                    case "0":
                        console.log("Aplicação encerrada.")
                        break
                    default:
                        console.log("Opção inválida.")
                }
            } catch (e) {
                console.error(e.message)
            }

            if (opcao !== "0") this.input("Pressione <Enter> para continuar...")
        } while (opcao !== "0")
    }

    inserirConta() {
        const numero = this.input("Número da conta: ")
        const saldo = parseFloat(this.input("Saldo inicial: "))
        this.banco.inserirConta(new Conta(numero, saldo))
        console.log("Conta inserida com sucesso.")
    }

    inserirCliente() {
        const nome = this.input("Nome do cliente: ")
        this.banco.inserirCliente(new Cliente(nome))
        console.log("Cliente inserido com sucesso.")
    }

    consultarConta() {
        const numero = this.input("Número da conta: ")
        const conta = this.banco.consultarConta(numero)
        console.log(conta ? conta.toString() : "Conta não encontrada.")
    }

    sacar() {
        const numero = this.input("Número da conta: ")
        const valor = parseFloat(this.input("Valor do saque: "))
        this.banco.sacar(numero, valor)
        console.log("Saque realizado com sucesso.")
    }

    depositar() {
        const numero = this.input("Número da conta: ")
        const valor = parseFloat(this.input("Valor do depósito: "))
        this.banco.depositar(numero, valor)
        console.log("Depósito realizado com sucesso.")
    }

    transferir() {
        const origem = this.input("Conta de origem: ")
        const destino = this.input("Conta de destino: ")
        const valor = parseFloat(this.input("Valor: "))
        this.banco.transferir(origem, destino, valor)
        console.log("Transferência realizada com sucesso.")
    }

    excluirCliente() {
        const nome = this.input("Nome do cliente: ")
        this.banco.excluirCliente(nome)
        console.log("Cliente excluído com sucesso.")
    }

    excluirConta() {
        const numero = this.input("Número da conta: ")
        this.banco.excluirConta(numero)
        console.log("Conta excluída com sucesso.")
    }

    listarContasSemCliente() {
        const contasSemCliente = this.banco.listarContasSemCliente()
        if (contasSemCliente.length === 0) {
            console.log("Não há contas sem cliente.")
        } else {
            console.log("Contas sem cliente:")
            contasSemCliente.forEach(conta => console.log(conta.toString()))
        }
    }

    ordemBancaria() {
        const origem = this.input("Conta de origem: ")
        const n = parseInt(this.input("Quantidade de transferências: "))
        const destinos = []
        for (let i = 0; i < n; i++) {
            const numeroDestino = this.input(`Número da conta destino ${i + 1}: `)
            const valor = parseFloat(this.input("Valor: "))
            destinos.push({ numeroDestino, valor })
        }
        this.banco.ordemBancaria(origem, destinos)
        console.log("Ordem bancária realizada com sucesso.")
    }
}

const app = new App()
app.menu()
